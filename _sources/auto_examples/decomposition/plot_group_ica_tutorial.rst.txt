
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/decomposition/plot_group_ica_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_decomposition_plot_group_ica_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_decomposition_plot_group_ica_tutorial.py:


===============
ICA: a tutorial
===============

Author: Pierre Ablin

Group ICA extends the celebrated Independent Component Analysis to multiple
datasets.

Single view ICA decomposes a dataset :math:`X` as
:math:`X = S \times A^{\top}`, where :math:`S` are the independent
sources (meaning that the columns of :math:`S` are independent),
and :math:`A` is the mixing matrix.

In group ICA, we have several views :math:`Xs = [X_1, \dots, X_n]`.
Each view is obtained as

.. math::

    X_i \simeq S \times A_i.T

so the views share the same sources :math:`S`, but have different mixing
matrices :math:`A_i`. It is a powerful tool for group inference, as it
allows to extract signals that are comon across views.

.. GENERATED FROM PYTHON SOURCE LINES 28-35

.. code-block:: default


    # License: MIT

    import numpy as np
    import matplotlib.pyplot as plt
    from mvlearn.decomposition import GroupICA








.. GENERATED FROM PYTHON SOURCE LINES 36-38

Define a Function to Plot Sources
---------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 38-46

.. code-block:: default



    def plot_sources(S):
        n_samples, n_sources = S.shape
        fig, axes = plt.subplots(n_sources, 1, figsize=(6, 4), sharex=True)
        for ax, sig in zip(axes, S.T):
            ax.plot(sig)








.. GENERATED FROM PYTHON SOURCE LINES 47-52

Define Independent Sources and Generate Noisy Observations
----------------------------------------------------------

Define indepdent sources. Next, generate some views, which are noisy
observations of linear transforms of these sources.

.. GENERATED FROM PYTHON SOURCE LINES 52-74

.. code-block:: default



    np.random.seed(0)
    n_samples = 2000
    time = np.linspace(0, 8, n_samples)

    s1 = np.sin(2 * time) * np.sin(40 * time)
    s2 = np.sin(3 * time) ** 5
    s3 = np.random.laplace(size=s1.shape)

    S = np.c_[s1, s2, s3]

    plot_sources(S)

    n_views = 10
    mixings = [np.random.randn(3, 3) for _ in range(n_views)]
    Xs = [np.dot(S, A.T) + 0.3 * np.random.randn(n_samples, 3) for A in mixings]

    # We can visualize one dataset: it looks quite messy.
    plot_sources(Xs[0])





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/decomposition/images/sphx_glr_plot_group_ica_tutorial_001.png
         :alt: plot group ica tutorial
         :srcset: /auto_examples/decomposition/images/sphx_glr_plot_group_ica_tutorial_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/decomposition/images/sphx_glr_plot_group_ica_tutorial_002.png
         :alt: plot group ica tutorial
         :srcset: /auto_examples/decomposition/images/sphx_glr_plot_group_ica_tutorial_002.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 75-82

Apply Group ICA
---------------

Next, we can apply group ICA. The option `multiview_output=False` means that
we want to recover the estimated sources when we do `.transform`. Here, we
look at what the algorithm estimates as the sources from the multiview
data.

.. GENERATED FROM PYTHON SOURCE LINES 82-89

.. code-block:: default



    groupica = GroupICA(multiview_output=False).fit(Xs)

    estimated_sources = groupica.transform(Xs)
    plot_sources(estimated_sources)




.. image-sg:: /auto_examples/decomposition/images/sphx_glr_plot_group_ica_tutorial_003.png
   :alt: plot group ica tutorial
   :srcset: /auto_examples/decomposition/images/sphx_glr_plot_group_ica_tutorial_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 90-101

Inspect Estimated Mixings
-------------------------

We see they look pretty good! We can also wheck that it has correctly
predicted each mixing matrix. The estimated mixing matrices are stored in
the `.individual_mixing_` attribute.

If :math:`\tilde{A}` is the estimated mixing matrix and :math:`A` is the
true mixing matrix, we can look at :math:`\tilde{A}^{-1}A`. It should be
close to a scale and permuation matrix: in this case, the sources are
correctly estimated, up to scale and permutation.

.. GENERATED FROM PYTHON SOURCE LINES 101-107

.. code-block:: default



    estimated_mixings = groupica.individual_mixing_

    plt.matshow(np.dot(np.linalg.pinv(estimated_mixings[0]), mixings[0]))




.. image-sg:: /auto_examples/decomposition/images/sphx_glr_plot_group_ica_tutorial_004.png
   :alt: plot group ica tutorial
   :srcset: /auto_examples/decomposition/images/sphx_glr_plot_group_ica_tutorial_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7f07175bd850>



.. GENERATED FROM PYTHON SOURCE LINES 108-114

Group ICA on Only 2 Views
-------------------------

A great advantage of groupICA is that it leverages the multiple views to
reduce noise. For instance, if only had two views, we would have obtained
the following.

.. GENERATED FROM PYTHON SOURCE LINES 114-135

.. code-block:: default



    estimated_sources = groupica.fit_transform(Xs[:2])
    plot_sources(estimated_sources)

    # Another important property of group ICA is that it can recover signals that
    # are common to all datasets, and separate these signals from the rest.
    # Imagine that we only have one common source across datasets:


    common_source = S[:, 0]
    mixings = np.random.randn(n_views, 3)
    Xs = [a * common_source[:, None] + 0.3 * np.random.randn(n_samples, 3)
          for a in mixings]


    estimated_sources = groupica.fit_transform(Xs)
    plot_sources(estimated_sources)

    # It recovers the common source on one channel, and the other estimated
    # sources are noise.



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/decomposition/images/sphx_glr_plot_group_ica_tutorial_005.png
         :alt: plot group ica tutorial
         :srcset: /auto_examples/decomposition/images/sphx_glr_plot_group_ica_tutorial_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/decomposition/images/sphx_glr_plot_group_ica_tutorial_006.png
         :alt: plot group ica tutorial
         :srcset: /auto_examples/decomposition/images/sphx_glr_plot_group_ica_tutorial_006.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.895 seconds)


.. _sphx_glr_download_auto_examples_decomposition_plot_group_ica_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_group_ica_tutorial.py <plot_group_ica_tutorial.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_group_ica_tutorial.ipynb <plot_group_ica_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
