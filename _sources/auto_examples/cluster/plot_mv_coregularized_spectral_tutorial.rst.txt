
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/cluster/plot_mv_coregularized_spectral_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_cluster_plot_mv_coregularized_spectral_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_cluster_plot_mv_coregularized_spectral_tutorial.py:


======================================================
Multiview Coregularized Spectral Clustering Comparison
======================================================

Here we will compare the performance of the Co-Regularized multiview and
singleview spectral clustering. We will evaluate the purity of
the resulting clusters from each algorithm with respect to the class labels
using the normalized mutual information metric.

As we can see, Co-Regularized multiview clustering produces clusters with
higher purity compared to those produced by singleview clustering for all 3
input types.

.. GENERATED FROM PYTHON SOURCE LINES 16-37

.. code-block:: default


    # License: MIT

    import warnings
    import numpy as np
    from sklearn.cluster import SpectralClustering
    from sklearn.metrics import normalized_mutual_info_score as nmi_score
    from mvlearn.datasets import load_UCImultifeature
    from mvlearn.cluster import MultiviewCoRegSpectralClustering
    from mvlearn.plotting import quick_visualize

    warnings.simplefilter('ignore')  # Ignore warnings
    RANDOM_SEED = 10


    # Load the UCI Digits Multiple Features Data Set as an Example Data Set
    # Load dataset along with labels for digits 0 through 4
    n_class = 5
    Xs, labels = load_UCImultifeature(
        select_labeled=list(range(n_class)), views=[0, 1])








.. GENERATED FROM PYTHON SOURCE LINES 38-42

Singleview spectral clustering
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Cluster each view separately and compute nmi

.. GENERATED FROM PYTHON SOURCE LINES 42-58

.. code-block:: default


    s_spectral = SpectralClustering(
        n_clusters=n_class, random_state=RANDOM_SEED, n_init=100)

    for i in range(len(Xs)):
        s_clusters = s_spectral.fit_predict(Xs[i])
        s_nmi = nmi_score(labels, s_clusters, average_method='arithmetic')
        print('Single-view View {0:d} NMI Score: {1:.3f}\n'.format(i + 1, s_nmi))

    # Concatenate the multiple views into a single view and produce clusters
    s_data = np.hstack(Xs)
    s_clusters = s_spectral.fit_predict(s_data)

    s_nmi = nmi_score(labels, s_clusters)
    print('Single-view Concatenated NMI Score: {0:.3f}\n'.format(s_nmi))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Single-view View 1 NMI Score: 0.620

    Single-view View 2 NMI Score: 0.009

    Single-view Concatenated NMI Score: 0.009





.. GENERATED FROM PYTHON SOURCE LINES 59-63

Co-Regularized multiview spectral clustering
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Use the MultiviewSpectralClustering instance to cluster the data

.. GENERATED FROM PYTHON SOURCE LINES 63-72

.. code-block:: default

    m_spectral1 = MultiviewCoRegSpectralClustering(n_clusters=n_class,
                                                   random_state=RANDOM_SEED,
                                                   n_init=100)
    m_clusters1 = m_spectral1.fit_predict(Xs)

    # Compute nmi between true class labels and multi-view cluster labels
    m_nmi1 = nmi_score(labels, m_clusters1)
    print('Multi-view NMI Score: {0:.3f}\n'.format(m_nmi1))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Multi-view NMI Score: 0.663





.. GENERATED FROM PYTHON SOURCE LINES 73-81

Visualize Results
^^^^^^^^^^^^^^^^^

Plots of clusters produced by multiview spectral clustering and the true
clusters.

We will display the clustering results of the Co-Regularized multiview
spectral clustering algorithm below, along with the true class labels.

.. GENERATED FROM PYTHON SOURCE LINES 81-86

.. code-block:: default


    quick_visualize(Xs, labels=labels, title='Ground Truth',
                    scatter_kwargs={'s': 8})
    quick_visualize(Xs, labels=m_clusters1, title='Multi-view Clustering',
                    scatter_kwargs={'s': 8})



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/cluster/images/sphx_glr_plot_mv_coregularized_spectral_tutorial_001.png
          :alt: Ground Truth
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/cluster/images/sphx_glr_plot_mv_coregularized_spectral_tutorial_002.png
          :alt: Multi-view Clustering
          :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  8.980 seconds)


.. _sphx_glr_download_auto_examples_cluster_plot_mv_coregularized_spectral_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_mv_coregularized_spectral_tutorial.py <plot_mv_coregularized_spectral_tutorial.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_mv_coregularized_spectral_tutorial.ipynb <plot_mv_coregularized_spectral_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
